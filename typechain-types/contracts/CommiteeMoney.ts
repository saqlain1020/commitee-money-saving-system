/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../common";

export interface CommiteeMoneyInterface extends utils.Interface {
  functions: {
    "balanceOf()": FunctionFragment;
    "commiteeEnabled()": FunctionFragment;
    "commiteeMembers(uint256)": FunctionFragment;
    "commiteeReward()": FunctionFragment;
    "commiteeWinners(uint256)": FunctionFragment;
    "destroyContract()": FunctionFragment;
    "disableCommitee()": FunctionFragment;
    "enableCommitee()": FunctionFragment;
    "fixedDepositAmount()": FunctionFragment;
    "getNotWonMembers()": FunctionFragment;
    "hasEveryonePaid()": FunctionFragment;
    "hasPaid(address)": FunctionFragment;
    "hasWon(address)": FunctionFragment;
    "isUserInCommitee(address)": FunctionFragment;
    "lastCommiteeOpenDate()": FunctionFragment;
    "openCommitee()": FunctionFragment;
    "owner()": FunctionFragment;
    "payCommitee()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setAllowedParticipants(uint256)": FunctionFragment;
    "setCommiteeReward(uint256)": FunctionFragment;
    "setFixedDepositAmount(uint256)": FunctionFragment;
    "totalAllowedParticipants()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "balanceOf"
      | "commiteeEnabled"
      | "commiteeMembers"
      | "commiteeReward"
      | "commiteeWinners"
      | "destroyContract"
      | "disableCommitee"
      | "enableCommitee"
      | "fixedDepositAmount"
      | "getNotWonMembers"
      | "hasEveryonePaid"
      | "hasPaid"
      | "hasWon"
      | "isUserInCommitee"
      | "lastCommiteeOpenDate"
      | "openCommitee"
      | "owner"
      | "payCommitee"
      | "renounceOwnership"
      | "setAllowedParticipants"
      | "setCommiteeReward"
      | "setFixedDepositAmount"
      | "totalAllowedParticipants"
      | "transferOwnership"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "balanceOf", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "commiteeEnabled",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "commiteeMembers",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "commiteeReward",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "commiteeWinners",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "destroyContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "disableCommitee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "enableCommitee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "fixedDepositAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getNotWonMembers",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "hasEveryonePaid",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "hasPaid", values: [string]): string;
  encodeFunctionData(functionFragment: "hasWon", values: [string]): string;
  encodeFunctionData(
    functionFragment: "isUserInCommitee",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "lastCommiteeOpenDate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "openCommitee",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "payCommitee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setAllowedParticipants",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setCommiteeReward",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setFixedDepositAmount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalAllowedParticipants",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "commiteeEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "commiteeMembers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "commiteeReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "commiteeWinners",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "destroyContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "disableCommitee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "enableCommitee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fixedDepositAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNotWonMembers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasEveryonePaid",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hasPaid", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasWon", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isUserInCommitee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastCommiteeOpenDate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "openCommitee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "payCommitee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAllowedParticipants",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCommiteeReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFixedDepositAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalAllowedParticipants",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "CommiteeClosed(uint256,address[],uint256)": EventFragment;
    "OpenCommitee(address,uint256,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "PaymentReceived(address,uint256,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CommiteeClosed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OpenCommitee"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PaymentReceived"): EventFragment;
}

export interface CommiteeClosedEventObject {
  date: BigNumber;
  members: string[];
  totalWinnings: BigNumber;
}
export type CommiteeClosedEvent = TypedEvent<
  [BigNumber, string[], BigNumber],
  CommiteeClosedEventObject
>;

export type CommiteeClosedEventFilter = TypedEventFilter<CommiteeClosedEvent>;

export interface OpenCommiteeEventObject {
  winner: string;
  amount: BigNumber;
  date: BigNumber;
}
export type OpenCommiteeEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  OpenCommiteeEventObject
>;

export type OpenCommiteeEventFilter = TypedEventFilter<OpenCommiteeEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface PaymentReceivedEventObject {
  from: string;
  amount: BigNumber;
  refunded: BigNumber;
  date: BigNumber;
}
export type PaymentReceivedEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber],
  PaymentReceivedEventObject
>;

export type PaymentReceivedEventFilter = TypedEventFilter<PaymentReceivedEvent>;

export interface CommiteeMoney extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: CommiteeMoneyInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    balanceOf(overrides?: CallOverrides): Promise<[BigNumber]>;

    commiteeEnabled(overrides?: CallOverrides): Promise<[boolean]>;

    commiteeMembers(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    commiteeReward(overrides?: CallOverrides): Promise<[BigNumber]>;

    commiteeWinners(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    destroyContract(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    disableCommitee(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    enableCommitee(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    fixedDepositAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    getNotWonMembers(
      overrides?: CallOverrides
    ): Promise<[string[]] & { addresses: string[] }>;

    hasEveryonePaid(overrides?: CallOverrides): Promise<[boolean]>;

    hasPaid(_member: string, overrides?: CallOverrides): Promise<[boolean]>;

    hasWon(_member: string, overrides?: CallOverrides): Promise<[boolean]>;

    isUserInCommitee(
      _member: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    lastCommiteeOpenDate(overrides?: CallOverrides): Promise<[BigNumber]>;

    openCommitee(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    payCommitee(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setAllowedParticipants(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setCommiteeReward(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setFixedDepositAmount(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    totalAllowedParticipants(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  balanceOf(overrides?: CallOverrides): Promise<BigNumber>;

  commiteeEnabled(overrides?: CallOverrides): Promise<boolean>;

  commiteeMembers(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  commiteeReward(overrides?: CallOverrides): Promise<BigNumber>;

  commiteeWinners(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  destroyContract(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  disableCommitee(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  enableCommitee(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  fixedDepositAmount(overrides?: CallOverrides): Promise<BigNumber>;

  getNotWonMembers(overrides?: CallOverrides): Promise<string[]>;

  hasEveryonePaid(overrides?: CallOverrides): Promise<boolean>;

  hasPaid(_member: string, overrides?: CallOverrides): Promise<boolean>;

  hasWon(_member: string, overrides?: CallOverrides): Promise<boolean>;

  isUserInCommitee(
    _member: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  lastCommiteeOpenDate(overrides?: CallOverrides): Promise<BigNumber>;

  openCommitee(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  payCommitee(
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setAllowedParticipants(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setCommiteeReward(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setFixedDepositAmount(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  totalAllowedParticipants(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    balanceOf(overrides?: CallOverrides): Promise<BigNumber>;

    commiteeEnabled(overrides?: CallOverrides): Promise<boolean>;

    commiteeMembers(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    commiteeReward(overrides?: CallOverrides): Promise<BigNumber>;

    commiteeWinners(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    destroyContract(overrides?: CallOverrides): Promise<void>;

    disableCommitee(overrides?: CallOverrides): Promise<void>;

    enableCommitee(overrides?: CallOverrides): Promise<void>;

    fixedDepositAmount(overrides?: CallOverrides): Promise<BigNumber>;

    getNotWonMembers(overrides?: CallOverrides): Promise<string[]>;

    hasEveryonePaid(overrides?: CallOverrides): Promise<boolean>;

    hasPaid(_member: string, overrides?: CallOverrides): Promise<boolean>;

    hasWon(_member: string, overrides?: CallOverrides): Promise<boolean>;

    isUserInCommitee(
      _member: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    lastCommiteeOpenDate(overrides?: CallOverrides): Promise<BigNumber>;

    openCommitee(overrides?: CallOverrides): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    payCommitee(overrides?: CallOverrides): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setAllowedParticipants(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setCommiteeReward(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setFixedDepositAmount(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    totalAllowedParticipants(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "CommiteeClosed(uint256,address[],uint256)"(
      date?: BigNumberish | null,
      members?: null,
      totalWinnings?: null
    ): CommiteeClosedEventFilter;
    CommiteeClosed(
      date?: BigNumberish | null,
      members?: null,
      totalWinnings?: null
    ): CommiteeClosedEventFilter;

    "OpenCommitee(address,uint256,uint256)"(
      winner?: string | null,
      amount?: null,
      date?: null
    ): OpenCommiteeEventFilter;
    OpenCommitee(
      winner?: string | null,
      amount?: null,
      date?: null
    ): OpenCommiteeEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "PaymentReceived(address,uint256,uint256,uint256)"(
      from?: string | null,
      amount?: null,
      refunded?: null,
      date?: null
    ): PaymentReceivedEventFilter;
    PaymentReceived(
      from?: string | null,
      amount?: null,
      refunded?: null,
      date?: null
    ): PaymentReceivedEventFilter;
  };

  estimateGas: {
    balanceOf(overrides?: CallOverrides): Promise<BigNumber>;

    commiteeEnabled(overrides?: CallOverrides): Promise<BigNumber>;

    commiteeMembers(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    commiteeReward(overrides?: CallOverrides): Promise<BigNumber>;

    commiteeWinners(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    destroyContract(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    disableCommitee(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    enableCommitee(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    fixedDepositAmount(overrides?: CallOverrides): Promise<BigNumber>;

    getNotWonMembers(overrides?: CallOverrides): Promise<BigNumber>;

    hasEveryonePaid(overrides?: CallOverrides): Promise<BigNumber>;

    hasPaid(_member: string, overrides?: CallOverrides): Promise<BigNumber>;

    hasWon(_member: string, overrides?: CallOverrides): Promise<BigNumber>;

    isUserInCommitee(
      _member: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lastCommiteeOpenDate(overrides?: CallOverrides): Promise<BigNumber>;

    openCommitee(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    payCommitee(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setAllowedParticipants(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setCommiteeReward(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setFixedDepositAmount(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    totalAllowedParticipants(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    balanceOf(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    commiteeEnabled(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    commiteeMembers(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    commiteeReward(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    commiteeWinners(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    destroyContract(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    disableCommitee(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    enableCommitee(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    fixedDepositAmount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNotWonMembers(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    hasEveryonePaid(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    hasPaid(
      _member: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hasWon(
      _member: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isUserInCommitee(
      _member: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lastCommiteeOpenDate(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    openCommitee(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    payCommitee(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setAllowedParticipants(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setCommiteeReward(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setFixedDepositAmount(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    totalAllowedParticipants(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
